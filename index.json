{"repository_name":"github.com/aca-labs/numcry","body":"# NumCry\n\n[![GitHub release](https://img.shields.io/github/release/aca-labs/numcry.svg)](https://github.com/aca-labs/numcry/releases)\n[![Build Status](https://travis-ci.com/aca-labs/numcry.svg?branch=master)](https://travis-ci.com/aca-labs/numcry)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://aca-labs.github.io/numcry/)\n\nLike NumPy, but slower!\n\nUseful methods for numerical computing in crystal-lang.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     numcry:\n       github: aca-labs/numcry\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n```crystal\nrequire \"numcry\"\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/aca-labs/numcry/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Kim Burgess](https://github.com/kimburgess) - creator and maintainer\n","program":{"html_id":"github.com/aca-labs/numcry/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/aca-labs/numcry","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/aca-labs/numcry/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","kind":"module","full_name":"Numcry::Accumulate::Ext","name":"Ext"}],"locations":[{"filename":"numcry/accumulate.cr","line_number":65,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr"},{"filename":"numcry/stats.cr","line_number":41,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr"},{"filename":"numcry/correlate.cr","line_number":21,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","kind":"module","full_name":"Numcry::Accumulate::Ext","name":"Ext"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/aca-labs/numcry/Iterator","kind":"module","full_name":"Iterator(T)","name":"Iterator"}],"namespace":null,"doc":"The `Enumerable` mixin provides collection classes with several traversal, searching,\nfiltering and querying methods.\n\nIncluding types must provide an `each` method, which yields successive members\nof the collection.\n\nFor example:\n\n```\nclass Three\n  include Enumerable(Int32)\n\n  def each\n    yield 1\n    yield 2\n    yield 3\n  end\nend\n\nthree = Three.new\nthree.to_a                # => [1, 2, 3]\nthree.select &.odd?       # => [1, 3]\nthree.all? { |x| x < 10 } # => true\n```\n\nNote that most search and filter methods traverse an Enumerable eagerly,\nproducing an `Array` as the result. For a lazy alternative refer to\nthe `Iterator` and `Iterable` modules.","summary":"<p>The <code><a href=\"Enumerable.html\">Enumerable</a></code> mixin provides collection classes with several traversal, searching, filtering and querying methods.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"corrcoef(other:Enumerable,ddof=0.0)-instance-method","html_id":"corrcoef(other:Enumerable,ddof=0.0)-instance-method","name":"corrcoef","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(other : Enumerable, ddof = <span class=\"n\">0.0</span>)","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr#L26","def":{"name":"corrcoef","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Correlate.corrcoef(self, other, ddof)"}},{"id":"cov(other:Enumerable,ddof=0.0)-instance-method","html_id":"cov(other:Enumerable,ddof=0.0)-instance-method","name":"cov","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(other : Enumerable, ddof = <span class=\"n\">0.0</span>)","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr#L22","def":{"name":"cov","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Correlate.cov(self, other, ddof)"}},{"id":"mean-instance-method","html_id":"mean-instance-method","name":"mean","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L42","def":{"name":"mean","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Stats.mean(self)"}},{"id":"std(ddof=0.0)-instance-method","html_id":"std(ddof=0.0)-instance-method","name":"std","doc":null,"summary":null,"abstract":false,"args":[{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(ddof = <span class=\"n\">0.0</span>)","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L50","def":{"name":"std","args":[{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Stats.std(self, ddof)"}},{"id":"var(ddof=0.0)-instance-method","html_id":"var(ddof=0.0)-instance-method","name":"var","doc":null,"summary":null,"abstract":false,"args":[{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(ddof = <span class=\"n\">0.0</span>)","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L46","def":{"name":"var","args":[{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Stats.var(self, ddof)"}}],"macros":[],"types":[]},{"html_id":"github.com/aca-labs/numcry/Iterator","path":"Iterator.html","kind":"module","full_name":"Iterator(T)","name":"Iterator","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","kind":"module","full_name":"Numcry::Accumulate::Ext","name":"Ext"},{"html_id":"github.com/aca-labs/numcry/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","kind":"module","full_name":"Numcry::Accumulate::Ext","name":"Ext"}],"locations":[{"filename":"numcry/accumulate.cr","line_number":69,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/aca-labs/numcry/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","kind":"module","full_name":"Numcry::Accumulate::Ext","name":"Ext"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Iterator` allows processing sequences lazily, as opposed to `Enumerable` which processes\nsequences eagerly and produces an `Array` in most of its methods.\n\nAs an example, let's compute the first three numbers in the range `1..10_000_000` that are even,\nmultiplied by three. One way to do this is:\n\n```\n(1..10_000_000).select(&.even?).map { |x| x * 3 }.first(3) # => [6, 12, 18]\n```\n\nThe above works, but creates many intermediate arrays: one for the *select* call,\none for the *map* call and one for the *take* call. A more efficient way is to invoke\n`Range#each` without a block, which gives us an `Iterator` so we can process the operations\nlazily:\n\n```\n(1..10_000_000).each.select(&.even?).map { |x| x * 3 }.first(3) # => #< Iterator(T)::First...\n```\n\n`Iterator` redefines many of `Enumerable`'s method in a lazy way, returning iterators\ninstead of arrays.\n\nAt the end of the call chain we get back a new iterator: we need to consume it, either\nusing `each` or `Enumerable#to_a`:\n\n```\n(1..10_000_000).each.select(&.even?).map { |x| x * 3 }.first(3).to_a # => [6, 12, 18]\n```\n\nTo implement an `Iterator` you need to define a `next` method that must return the next\nelement in the sequence or `Iterator::Stop::INSTANCE`, which signals the end of the sequence\n(you can invoke `stop` inside an iterator as a shortcut).\n\nFor example, this is an iterator that returns a sequence of `N` zeros:\n\n```\nclass Zeros\n  include Iterator(Int32)\n\n  def initialize(@size : Int32)\n    @produced = 0\n  end\n\n  def next\n    if @produced < @size\n      @produced += 1\n      0\n    else\n      stop\n    end\n  end\nend\n\nzeros = Zeros.new(5)\nzeros.to_a # => [0, 0, 0, 0, 0]\n```\n\nThe standard library provides iterators for many classes, like `Array`, `Hash`, `Range`, `String` and `IO`.\nUsually to get an iterator you invoke a method that would usually yield elements to a block,\nbut without passing a block: `Array#each`, `Array#each_index`, `Hash#each`, `String#each_char`,\n`IO#each_line`, etc.","summary":"<p>An <code><a href=\"Iterator.html\">Iterator</a></code> allows processing sequences lazily, as opposed to <code><a href=\"Enumerable.html\">Enumerable</a></code> which processes sequences eagerly and produces an <code>Array</code> in most of its methods.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"github.com/aca-labs/numcry/Numcry","path":"Numcry.html","kind":"module","full_name":"Numcry","name":"Numcry","abstract":false,"superclass":null,"ancestors":[{"html_id":"github.com/aca-labs/numcry/Numcry/Correlate","kind":"module","full_name":"Numcry::Correlate","name":"Correlate"},{"html_id":"github.com/aca-labs/numcry/Numcry/Stats","kind":"module","full_name":"Numcry::Stats","name":"Stats"},{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate","kind":"module","full_name":"Numcry::Accumulate","name":"Accumulate"}],"locations":[{"filename":"numcry/accumulate.cr","line_number":2,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr"},{"filename":"numcry.cr","line_number":3,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.0\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate","kind":"module","full_name":"Numcry::Accumulate","name":"Accumulate"},{"html_id":"github.com/aca-labs/numcry/Numcry/Correlate","kind":"module","full_name":"Numcry::Correlate","name":"Correlate"},{"html_id":"github.com/aca-labs/numcry/Numcry/Stats","kind":"module","full_name":"Numcry::Stats","name":"Stats"}],"extended_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"}],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate","path":"Numcry/Accumulate.html","kind":"module","full_name":"Numcry::Accumulate","name":"Accumulate","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"numcry/accumulate.cr","line_number":2,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate","kind":"module","full_name":"Numcry::Accumulate","name":"Accumulate"}],"subclasses":[],"including_types":[{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"}],"namespace":{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"},"doc":"Tools for producing cumulative values across collections.","summary":"<p>Tools for producing cumulative values across collections.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"accumulate(collection:Iterator(T),initial:U,&block:U,T->U)forallT,U-instance-method","html_id":"accumulate(collection:Iterator(T),initial:U,&amp;block:U,T-&gt;U)forallT,U-instance-method","name":"accumulate","doc":"Accumulate the results of applying the passed block to each element in\n*collection* and the previous cumulative value, starting with *initial*.\n\n```\naccumulate((1..3), 10) { |a, b| a + b } # => [11, 13, 16]\n```","summary":"<p>Accumulate the results of applying the passed block to each element in <em>collection</em> and the previous cumulative value, starting with <em>initial</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Iterator(T)"},{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"args_string":"(collection : Iterator(T), initial : U, &block : U, T -> U) forall T, U","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L31","def":{"name":"accumulate","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Iterator(T)"},{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(U, T -> U)"},"return_type":"","visibility":"Public","body":"accum = initial\ncollection.reduce([] of U) do |arr, x|\n  accum = yield accum, x\n  arr << accum\nend\n"}},{"id":"accumulate(collection:Enumerable(T),initial:U,&block:U,T->U)forallT,U-instance-method","html_id":"accumulate(collection:Enumerable(T),initial:U,&amp;block:U,T-&gt;U)forallT,U-instance-method","name":"accumulate","doc":"Accumulate the results of applying the passed block to each element in\n*collection* and the previous cumulative value, starting with *initial*.\n\n```\naccumulate((1..3), 10) { |a, b| a + b } # => [11, 13, 16]\n```","summary":"<p>Accumulate the results of applying the passed block to each element in <em>collection</em> and the previous cumulative value, starting with <em>initial</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"args_string":"(collection : Enumerable(T), initial : U, &block : U, T -> U) forall T, U","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L40","def":{"name":"accumulate","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(U, T -> U)"},"return_type":"","visibility":"Public","body":"Array(U).build(collection.size) do |buffer|\n  accum = initial\n  collection.each_with_index do |x, i|\n    buffer[i] = accum = yield accum, x\n  end\n  collection.size\nend"}},{"id":"cumprod(collection:Enumerable(T)|Iterator(T))forallT-instance-method","html_id":"cumprod(collection:Enumerable(T)|Iterator(T))forallT-instance-method","name":"cumprod","doc":"Return an `Array` containing the cumulative product of elements from\n*collection*.\n\n```\ncumprod((1..3)) # => [1, 2, 6]\n```","summary":"<p>Return an <code>Array</code> containing the cumulative product of elements from <em>collection</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T) | Iterator(T)"}],"args_string":"(collection : Enumerable(T) | Iterator(T)) forall T","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L21","def":{"name":"cumprod","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T) | Iterator(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"accumulate(collection, Reflect(T).first.zero + 1) do |a, b|\n  a * b\nend"}},{"id":"cumsum(collection:Enumerable(T)|Iterator(T))forallT-instance-method","html_id":"cumsum(collection:Enumerable(T)|Iterator(T))forallT-instance-method","name":"cumsum","doc":"Return an `Array` containing the cumulative sum of elements from\n*collection*.\n\n```\ncumsum((1..3)) # => [1, 3, 6]\n```","summary":"<p>Return an <code>Array</code> containing the cumulative sum of elements from <em>collection</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T) | Iterator(T)"}],"args_string":"(collection : Enumerable(T) | Iterator(T)) forall T","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L11","def":{"name":"cumsum","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T) | Iterator(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"accumulate(collection, Reflect(T).first.zero) do |a, b|\n  a + b\nend"}}],"macros":[],"types":[{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate/Ext","path":"Numcry/Accumulate/Ext.html","kind":"module","full_name":"Numcry::Accumulate::Ext(T)","name":"Ext","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"numcry/accumulate.cr","line_number":51,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/aca-labs/numcry/Enumerable","kind":"module","full_name":"Enumerable(T)","name":"Enumerable"},{"html_id":"github.com/aca-labs/numcry/Iterator","kind":"module","full_name":"Iterator(T)","name":"Iterator"}],"namespace":{"html_id":"github.com/aca-labs/numcry/Numcry/Accumulate","kind":"module","full_name":"Numcry::Accumulate","name":"Accumulate"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"accumulate(initial:U,&block:U,T->U)forallU-instance-method","html_id":"accumulate(initial:U,&amp;block:U,T-&gt;U)forallU-instance-method","name":"accumulate","doc":null,"summary":null,"abstract":false,"args":[{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"args_string":"(initial : U, &block : U, T -> U) forall U","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L60","def":{"name":"accumulate","args":[{"name":"initial","doc":null,"default_value":"","external_name":"initial","restriction":"U"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(U, T -> U)"},"return_type":"","visibility":"Public","body":"Numcry::Accumulate.accumulate(self, initial, &block)"}},{"id":"cumprod-instance-method","html_id":"cumprod-instance-method","name":"cumprod","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L56","def":{"name":"cumprod","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Accumulate.cumprod(self)"}},{"id":"cumsum-instance-method","html_id":"cumsum-instance-method","name":"cumsum","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/accumulate.cr#L52","def":{"name":"cumsum","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Numcry::Accumulate.cumsum(self)"}}],"macros":[],"types":[]}]},{"html_id":"github.com/aca-labs/numcry/Numcry/Correlate","path":"Numcry/Correlate.html","kind":"module","full_name":"Numcry::Correlate","name":"Correlate","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"numcry/correlate.cr","line_number":5,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry/Correlate","kind":"module","full_name":"Numcry::Correlate","name":"Correlate"}],"subclasses":[],"including_types":[{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"}],"namespace":{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"},"doc":"Methods for computing correlation coefficients between `Enumerable`\ncollections.","summary":"<p>Methods for computing correlation coefficients between <code><a href=\"../Enumerable.html\">Enumerable</a></code> collections.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"corrcoef(a:Enumerable,b:Enumerable,ddof=0.0)-instance-method","html_id":"corrcoef(a:Enumerable,b:Enumerable,ddof=0.0)-instance-method","name":"corrcoef","doc":"Compute the Pearson correlation coefficient for *a* and *b*.","summary":"<p>Compute the Pearson correlation coefficient for <em>a</em> and <em>b</em>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Enumerable"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(a : Enumerable, b : Enumerable, ddof = <span class=\"n\">0.0</span>)","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr#L16","def":{"name":"corrcoef","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Enumerable"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Enumerable"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(cov(a, b, ddof)) / ((Stats.std(a, ddof)) * (Stats.std(b, ddof)))"}},{"id":"cov(a:Enumerable(T),b:Enumerable(U),ddof=0.0)forallT,U-instance-method","html_id":"cov(a:Enumerable(T),b:Enumerable(U),ddof=0.0)forallT,U-instance-method","name":"cov","doc":"Compute the covariance between two collections *a* and *b*.","summary":"<p>Compute the covariance between two collections <em>a</em> and <em>b</em>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Enumerable(T)"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Enumerable(U)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(a : Enumerable(T), b : Enumerable(U), ddof = <span class=\"n\">0.0</span>) forall T, U","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/correlate.cr#L9","def":{"name":"cov","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Enumerable(T)"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Enumerable(U)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if a.size != b.size\n  raise(ArgumentError.new(\"sizes must be uniform\"))\nend\ne = a.mean * b.mean\n(a.zip(b)).sum do |x, y|\n  (x * y) - e\nend / (a.size - ddof)\n"}}],"macros":[],"types":[]},{"html_id":"github.com/aca-labs/numcry/Numcry/Stats","path":"Numcry/Stats.html","kind":"module","full_name":"Numcry::Stats","name":"Stats","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"numcry/stats.cr","line_number":4,"url":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr"}],"repository_name":"github.com/aca-labs/numcry","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"github.com/aca-labs/numcry/Numcry/Stats","kind":"module","full_name":"Numcry::Stats","name":"Stats"}],"subclasses":[],"including_types":[{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"}],"namespace":{"html_id":"github.com/aca-labs/numcry/Numcry","kind":"module","full_name":"Numcry","name":"Numcry"},"doc":"Base stats methods.","summary":"<p>Base stats methods.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"mean(collection:Enumerable(T))forallT-instance-method","html_id":"mean(collection:Enumerable(T))forallT-instance-method","name":"mean","doc":"Compute the mean for values contained within *collection*.\n\n```\nmean(1..6) # => 3.5\n```","summary":"<p>Compute the mean for values contained within <em>collection</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"}],"args_string":"(collection : Enumerable(T)) forall T","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L12","def":{"name":"mean","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"collection.sum / collection.size.to_f"}},{"id":"std(collection:Enumerable(T),ddof=0.0)forallT-instance-method","html_id":"std(collection:Enumerable(T),ddof=0.0)forallT-instance-method","name":"std","doc":"Compute the standard deviation for values within *collection*.\n\n```\nstd(1..6) # => 1.708\n```","summary":"<p>Compute the standard deviation for values within <em>collection</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(collection : Enumerable(T), ddof = <span class=\"n\">0.0</span>) forall T","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L36","def":{"name":"std","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Math.sqrt(var(collection, ddof))"}},{"id":"var(collection:Enumerable(T),ddof=0.0)forallT-instance-method","html_id":"var(collection:Enumerable(T),ddof=0.0)forallT-instance-method","name":"var","doc":"Compute the variance across values contained in *collection*.\n\nDefault normalisation (N) is applied such that this may be used directly on\ncollections representing the full population. When working with a sample,\n*ddof* may be used to specify a delta degrees of freedom and correct bias.\n\n```\nvar(1..6) # => 2.917\n```","summary":"<p>Compute the variance across values contained in <em>collection</em>.</p>","abstract":false,"args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"args_string":"(collection : Enumerable(T), ddof = <span class=\"n\">0.0</span>) forall T","source_link":"https://github.com/aca-labs/numcry/blob/338758a71f7b15a726a063d8ce1bf443719cbe3c/src/numcry/stats.cr#L25","def":{"name":"var","args":[{"name":"collection","doc":null,"default_value":"","external_name":"collection","restriction":"Enumerable(T)"},{"name":"ddof","doc":null,"default_value":"0.0","external_name":"ddof","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if collection.size == 0\n  return 0.0\nend\nu = mean(collection)\ncollection.sum do |x|\n  (x - u) ** 2\nend / (collection.size - ddof)\n"}}],"macros":[],"types":[]}]}]}}